// <auto-generated />
using System;
using BirdWatching.Shared.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250626155336_NewWatcherDtoForLeaderboard")]
    partial class NewWatcherDtoForLeaderboard
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.5");

            modelBuilder.Entity("BirdWatching.Shared.Model.Bird", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Familia")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Genus")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Ordo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Species")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Birds");
                });

            modelBuilder.Entity("BirdWatching.Shared.Model.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("AllowDuplicates")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("End")
                        .HasColumnType("TEXT");

                    b.Property<string>("FamiliaRegex")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("GenusRegex")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("MainAdminId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("OrdoRegex")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PublicIdentifier")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SpeciesRegex")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Start")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MainAdminId");

                    b.HasIndex("UserId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("BirdWatching.Shared.Model.Record", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BirdId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Count")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateSeen")
                        .HasColumnType("TEXT");

                    b.Property<int>("WatcherId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("BirdId");

                    b.HasIndex("WatcherId");

                    b.ToTable("Records");
                });

            modelBuilder.Entity("BirdWatching.Shared.Model.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            DisplayName = "SUPER uživatel",
                            Email = "email@email.com",
                            IsAdmin = true,
                            PasswordHash = "string",
                            UserName = "string"
                        });
                });

            modelBuilder.Entity("BirdWatching.Shared.Model.Watcher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("MainCuratorId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PublicIdentifier")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MainCuratorId");

                    b.ToTable("Watchers");
                });

            modelBuilder.Entity("EventWatcher", b =>
                {
                    b.Property<int>("ParticipantsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ParticipatingId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ParticipantsId", "ParticipatingId");

                    b.HasIndex("ParticipatingId");

                    b.ToTable("EventParticipants", (string)null);
                });

            modelBuilder.Entity("UserWatcher", b =>
                {
                    b.Property<int>("CuratedWatchersId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CuratorsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("CuratedWatchersId", "CuratorsId");

                    b.HasIndex("CuratorsId");

                    b.ToTable("WatcherCurators", (string)null);
                });

            modelBuilder.Entity("BirdWatching.Shared.Model.Event", b =>
                {
                    b.HasOne("BirdWatching.Shared.Model.User", "MainAdmin")
                        .WithMany("Events")
                        .HasForeignKey("MainAdminId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BirdWatching.Shared.Model.User", null)
                        .WithMany("AdministeredEvents")
                        .HasForeignKey("UserId");

                    b.Navigation("MainAdmin");
                });

            modelBuilder.Entity("BirdWatching.Shared.Model.Record", b =>
                {
                    b.HasOne("BirdWatching.Shared.Model.Bird", "Bird")
                        .WithMany()
                        .HasForeignKey("BirdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BirdWatching.Shared.Model.Watcher", "Watcher")
                        .WithMany("Records")
                        .HasForeignKey("WatcherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bird");

                    b.Navigation("Watcher");
                });

            modelBuilder.Entity("BirdWatching.Shared.Model.Watcher", b =>
                {
                    b.HasOne("BirdWatching.Shared.Model.User", "MainCurator")
                        .WithMany("Watchers")
                        .HasForeignKey("MainCuratorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MainCurator");
                });

            modelBuilder.Entity("EventWatcher", b =>
                {
                    b.HasOne("BirdWatching.Shared.Model.Watcher", null)
                        .WithMany()
                        .HasForeignKey("ParticipantsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BirdWatching.Shared.Model.Event", null)
                        .WithMany()
                        .HasForeignKey("ParticipatingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UserWatcher", b =>
                {
                    b.HasOne("BirdWatching.Shared.Model.Watcher", null)
                        .WithMany()
                        .HasForeignKey("CuratedWatchersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BirdWatching.Shared.Model.User", null)
                        .WithMany()
                        .HasForeignKey("CuratorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BirdWatching.Shared.Model.User", b =>
                {
                    b.Navigation("AdministeredEvents");

                    b.Navigation("Events");

                    b.Navigation("Watchers");
                });

            modelBuilder.Entity("BirdWatching.Shared.Model.Watcher", b =>
                {
                    b.Navigation("Records");
                });
#pragma warning restore 612, 618
        }
    }
}
