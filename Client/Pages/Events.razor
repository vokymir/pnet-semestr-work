@page "/souteze"
@inject BirdApiClient BAC
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<PageTitle>Soutěže</PageTitle>

<h1 class="mb-4">🕊️ Soutěže</h1>
<HelpBox InitiallyVisible="false">
Přidej se do soutěže, aby ses mohl(a) porovnat s ostatními. <br/>
Každá soutěž má svůj speciální kód. Buď si můžeš najít veřejnou soutěž, anebo Tě někdo musí pozvat a dát Ti ten kód. Pak se přidáš pomocí tlačítka s klíčem (🔑). <br />
Taky je možný nějakou soutěž založit. To se dělá na tlačítku s plusem (➕), ale to je spíš pro vedoucí, anebo technické typy lidí.
</HelpBox>

<div class="mb-3 d-flex flex-wrap align-items-end gap-3">
    <div>
        <label for="filter" class="form-label">🎯 Filtrovat soutěže:</label>
        <select id="filter" class="form-select w-auto" @bind="SelectedFilter">
            <option value="all">Všechny</option>
            <option value="mine">Moje</option>
            <option value="participating">Účastním se</option>
        </select>
    </div>

    <div class="ms-auto">
        <Button Type="ButtonType.Link" To="/soutez/nova" Color="ButtonColor.Primary" class="me-2">
            ➕ Vytvořit soutěž
        </Button>
        <Button Color="ButtonColor.Secondary" @onclick="ShowModal">
            🔑 Přidat se do soutěže
        </Button>
    </div>
</div>

<JoinEventModal @ref="JoinModal" User="U" OnEventJoined="LoadEvents" />

<div class="row">
    @if (FilteredEvents is null || !FilteredEvents.Any())
    {
        <div class="text-muted">Žádné soutěže nebyly nalezeny.</div>
    }
    else
    {
        @foreach (var e in FilteredEvents)
        {
            var isMine = MyEventIds.Contains(e.Id);
            var myWatchers = Watcherss
                .Where(w => e.Participants?.Any(p => p.Id == w.Id) == true)
                .ToList() ?? new();

            <div class="col-12 col-sm-6 col-lg-4 mb-4">
                <Card class="shadow-sm h-100">
                    <CardBody>
                        <CardTitle class="fs-5 fw-bold">@e.Name</CardTitle>
                        <CardText>
                            <div><strong>🔗 Kód:</strong> @e.PublicIdentifier</div>
                            <div><strong>🌍 Veřejná:</strong> @(e.IsPublic ? "Ano" : "Ne")</div>

                            @if (isMine)
                            {
                                <div class="mt-2 badge bg-success">🟢 Moje soutěž</div>
                            }

                            @if (myWatchers.Any())
                            {
                                <div class="mt-2">
                                    <strong>🐦 Účastní se moji pozorovatelé:</strong>
                                    <ul class="ps-3 mb-0">
                                        @foreach (var w in myWatchers)
                                        {
                                            <li>@w.FirstName @w.LastName</li>
                                        }
                                    </ul>
                                </div>
                            }
                        </CardText>

                        <div class="d-flex justify-content-between mt-3">
                            <Button Color="ButtonColor.Primary" Type="ButtonType.Link"
                                    To="@($"/soutez/{e.PublicIdentifier}")">
                                🔍 Zobrazit
                            </Button>
                            <Button Color="ButtonColor.Success"
                                    @onclick="() => OpenJoinModal(e.PublicIdentifier)">
                                🏁 Soutěžit
                            </Button>
                        </div>
                    </CardBody>
                </Card>
            </div>
        }
    }
</div>

@code {
    private UserDto? U = null;
    private List<EventDto> AllEvents = new();
    private List<EventDto> FilteredEvents = new();
    private HashSet<int> MyEventIds = new();
    private JoinEventModal? JoinModal;
    private List<WatcherDto> Watcherss = new();

    private string selectedFilter = "all";
    private string SelectedFilter
    {
        get => selectedFilter;
        set
        {
            if (selectedFilter != value)
            {
                selectedFilter = value;
                ApplyFilter();
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadUser();
            await LoadEvents();
            ApplyFilter();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Chyba při načítání soutěží: {ex.Message}");
        }
    }

    private async Task LoadUser(){
        U = await LocalStorage.GetItemAsync<UserDto>("userDto");
        if (U is null) throw new Exception("Nelze načíst userDto z local storage.");

        Watcherss = U?.Watchers?.ToList() ?? new List<WatcherDto>();
        if (U?.CuratedWatchers is not null)
            foreach (var w in U.CuratedWatchers){
                bool shouldAdd = true;
                foreach (var ww in Watcherss)
                    if (w.Id == ww.Id){
                        shouldAdd = false;
                        break;
                    }
                if (shouldAdd)
                    Watcherss.Add(w);
            }
    }

    private async Task LoadEvents(){
        var seenIds = new HashSet<int>();

        // Moje soutěže
        if (U is null) throw new Exception("UserDto is not loaded.");
        var mine = await BAC.Event_GetByUserIdAsync(U.Id);
        foreach (var e in mine)
        {
            e.Participants ??= new List<WatcherDto>();
            if (seenIds.Add(e.Id))
            {
                AllEvents.Add(e);
                MyEventIds.Add(e.Id);
            }
        }

        // Soutěže, kde se účastní moji ptáčkaři

        if (Watcherss is not null)
        {
            foreach (var w in Watcherss)
            {
                var joined = await BAC.Event_GetByWatcherIdAsync(w.Id);
                foreach (var e in joined)
                {
                    e.Participants ??= new List<WatcherDto>();

                    if (seenIds.Add(e.Id))
                    {
                        AllEvents.Add(e);
                    }

                    // Přidat účastníka, pokud chybí
                    if (!e.Participants.Any(p => p.Id == w.Id))
                    {
                        e.Participants.Add(new WatcherDto { Id = w.Id });
                    }
                }
            }
        }

        // vsechny public
        var evs = await BAC.Event_GetAllAsync();
        foreach (var e in evs){
            if (e.IsPublic && seenIds.Add(e.Id))
            {
                AllEvents.Add(e);
            }
        }
    }

    private void ApplyFilter()
    {
        FilteredEvents = SelectedFilter switch
        {
            "mine" => AllEvents.Where(e => MyEventIds.Contains(e.Id)).ToList(),
            "participating" => AllEvents
            .Where(e => Watcherss.Any(w => e.Participants?.Any(p => p.Id == w.Id) == true) == true)
            .ToList(),
            _ => AllEvents.ToList()
        };
    }

    private async Task ShowModal()
    {
        if (JoinModal is not null)
            await JoinModal.ShowAsync(U);
    }

    private async Task OpenJoinModal(string publicIdentifier)
    {
        if (JoinModal is not null)
        {
            await JoinModal.ShowAsync(U, publicIdentifier);
        }
    }
}
