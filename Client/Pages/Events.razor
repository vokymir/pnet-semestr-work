@page "/souteze"
@inject BirdApiClient BAC
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<PageTitle>Soutěže</PageTitle>

<h1>Soutěže</h1>

<div class="mb-3">
    <label for="filter" class="form-label">Filtrovat:</label>
    <select id="filter" class="form-select w-auto" @bind="SelectedFilter">
        <option value="all">Všechny</option>
        <option value="mine">Moje</option>
        <option value="participating">Účastním se</option>
    </select>
</div>

<div class="mb-4">
    <Button Type="ButtonType.Link" To="/soutez/nova" Color="ButtonColor.Primary">Vytvořit soutěž</Button>
    <Button Color="ButtonColor.Secondary" @onclick="ShowModal">Přidat se do soutěže</Button>
</div>

<JoinEventModal @ref="JoinModal" User="U" OnEventJoined="LoadEvents" />

<div class="row">
    @if (FilteredEvents is null || !FilteredEvents.Any())
    {
        <p>Žádné soutěže...</p>
    }
    else
    {
        @foreach (var e in FilteredEvents)
        {
            var isMine = MyEventIds.Contains(e.Id);
            var participatingWatchers = U?.Watchers?
            .Where(w => e.Participants?.Any(p => p.Id == w.Id) == true)
            .ToList() ?? new();

            <div class="col-12 col-sm-6 col-md-4 col-lg-3 mb-4">
                <Card class="h-100">
                    <CardBody>
                        <CardTitle>@e.Name</CardTitle>
                        <CardText>
                            <div><strong>Kód:</strong> @e.PublicIdentifier</div>

                            @if (isMine)
                            {
                                <div class="text-success">🟢 Moje soutěž</div>
                            }
                            @if (participatingWatchers.Any())
                            {
                                <div class="text-primary">
                                    🐦 Účastní se:
                                    <ul class="mb-0">
                                        @foreach (var w in participatingWatchers)
                                        {
                                            <li>@w.FirstName @w.LastName</li>
                                        }
                                    </ul>
                                </div>
                            }
                        </CardText>
                        <Button Color="ButtonColor.Primary" To=@($"/soutez/{e.PublicIdentifier}")
                            Type="ButtonType.Link">Zobrazit</Button>
                    </CardBody>
                </Card>
            </div>
        }
    }
</div>

@code {
    private UserDto? U = null;
    private List<EventDto> AllEvents = new();
    private List<EventDto> FilteredEvents = new();
    private HashSet<int> MyEventIds = new();
    private JoinEventModal? JoinModal;

    private string selectedFilter = "all";
    private string SelectedFilter
    {
        get => selectedFilter;
        set
        {
            if (selectedFilter != value)
            {
                selectedFilter = value;
                ApplyFilter();
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadUser();
            await LoadEvents();
            ApplyFilter();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Chyba při načítání soutěží: {ex.Message}");
        }
    }

    private async Task LoadUser(){
        U = await LocalStorage.GetItemAsync<UserDto>("userDto");
        if (U is null) throw new Exception("Nelze načíst userDto z local storage.");
    }

    private async Task LoadEvents(){
        var seenIds = new HashSet<int>();

        // Moje soutěže
        if (U is null) throw new Exception("UserDto is not loaded.");
        var mine = await BAC.Event_GetByUserIdAsync(U.Id);
        foreach (var e in mine)
        {
            e.Participants ??= new List<WatcherDto>();
            if (seenIds.Add(e.Id))
            {
                AllEvents.Add(e);
                MyEventIds.Add(e.Id);
            }
        }

        // Soutěže, kde se účastní moji ptáčkaři
        if (U.Watchers is not null)
        {
            foreach (var w in U.Watchers)
            {
                var joined = await BAC.Event_GetByWatcherIdAsync(w.Id);
                foreach (var e in joined)
                {
                    e.Participants ??= new List<WatcherDto>();

                    if (seenIds.Add(e.Id))
                    {
                        AllEvents.Add(e);
                    }

                    // Přidat účastníka, pokud chybí
                    if (!e.Participants.Any(p => p.Id == w.Id))
                    {
                        e.Participants.Add(new WatcherDto { Id = w.Id });
                    }
                }
            }
        }

        // vsechny public
        var evs = await BAC.Event_GetAllAsync();
        foreach (var e in evs){
            if (e.IsPublic && seenIds.Add(e.Id))
            {
                AllEvents.Add(e);
            }
        }
    }

    private void ApplyFilter()
    {
        FilteredEvents = SelectedFilter switch
        {
            "mine" => AllEvents.Where(e => MyEventIds.Contains(e.Id)).ToList(),
            "participating" => AllEvents
            .Where(e => U?.Watchers?.Any(w => e.Participants?.Any(p => p.Id == w.Id) == true) == true)
            .ToList(),
            _ => AllEvents.ToList()
        };
    }

    private async Task ShowModal()
    {
        if (JoinModal is not null)
            await JoinModal.ShowAsync(U);
    }
}
