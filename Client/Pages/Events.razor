@page "/souteze"
@inject BirdApiClient BAC
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<PageTitle>Soutěže</PageTitle>

<h1>Events</h1>

Welcome to your new app. Tohle by pak ideálně mělo nějaký "sortění", aby se dalo vybrat všechny/moje/účastním se/neúčastním se. Plus bych mohl vymyslet pagination, zakomponovanou rovnou v API, protože brzo asi bude hodně věcí. Tak uvidíme.

<Button Type="ButtonType.Link" To="/soutez/nova" Color="ButtonColor.Primary">Vytvořit soutěž</Button>
<Button Color="ButtonColor.Secondary" @onclick="ShowModal">Přidat se do soutěže</Button>
<JoinEventModal @ref="JoinModal" User="U" />

<CardGroup>

    @if (E is null || !E.Any())
    {
        <p>Žádné soutěže...</p>
    }
    else
    {
        @foreach (var e in E ?? Array.Empty<EventDto>())
        {
            <Card Style="width:18rem;">
                <CardBody>
                    <CardTitle>@e.Name</CardTitle>
                    <CardText>@e.PublicIdentifier A tady by mělo být info, že to je moje soutěž, anebo, který z mých ptáčkařů se jí účastní
                        (vyjmenovaní všichni).</CardText>
                    <Button Color="ButtonColor.Primary" To=@($"/soutez/{e.PublicIdentifier}")
                        Type="ButtonType.Link">Zobrazit</Button>
                </CardBody>
            </Card>
        }
    }

</CardGroup>


@code {
    private UserDto? U = null;
    private ICollection<EventDto>? E = null;
    private List<ToastMessage> messages = new();

    private JoinEventModal? JoinModal = default;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            U = await LocalStorage.GetItemAsync<UserDto>("userDto");
            if (U is null) throw new Exception("Cannot find userDto in local storage.");

            var result = new List<EventDto>();
            var seenIds = new HashSet<int>();

            // Events user is admin of
            var userEvents = await BAC.Event_GetByUserIdAsync(U.Id);
            foreach (var e in userEvents)
            {
                if (seenIds.Add(e.Id))
                    result.Add(e);
            }

            // Events where user's watchers are participants
            if (U.Watchers is not null)
            {
                foreach (var W in U.Watchers)
                {
                    var watcherEvents = await BAC.Event_GetByWatcherIdAsync(W.Id);
                    foreach (var e in watcherEvents)
                    {
                        if (seenIds.Add(e.Id))
                            result.Add(e);
                    }
                }
            }

            E = result;
        }
        catch (Exception ex)
        {
            messages.Add(new ToastMessage
            {
                Type = ToastType.Warning,
                Title = "Chyba",
                HelpText = $"{DateTime.Now}",
                Message = $"Problém s načítáním soutěží. Zkontrolujte, že jste přihlášeni.<br/>Problém: {ex.Message}",
                AutoHide = true
            });
        }
    }

     private async Task ShowModal()
    {
        if (JoinModal is not null)
            await JoinModal.ShowAsync(U);
    }
}
