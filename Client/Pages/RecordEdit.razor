@page "/zaznam/{id:int}/upravit"
@inject BirdApiClient BAC
@inject NavigationManager Nav
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<h3>Upravit z√°znam</h3>

@if (isLoading)
{
    <p>Naƒç√≠t√°m...</p>
}
else if (record is null)
{
    <div class="alert alert-danger">Z√°znam nebyl nalezen.</div>
}
else
{
    <EditForm Model="record" OnValidSubmit="SaveChanges">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label class="form-label">Datum pozorov√°n√≠</label>
            <InputDate class="form-control" @bind-Value="record.DateSeen" />
        </div>

        <div class="mb-3">
            <label class="form-label">Poƒçet</label>
            <InputNumber class="form-control" @bind-Value="record.Count" />
        </div>

        <div class="mb-3">
            <label class="form-label">P≈ôesnost (m)</label>
            <InputNumber class="form-control" @bind-Value="record.Accuracy" />
        </div>

        <div class="mb-3">
            <label class="form-label">Popis lokace</label>
            <InputText class="form-control" @bind-Value="record.LocationDescribed" />
        </div>

        <div class="mb-3">
            <label class="form-label">Cel√Ω koment√°≈ô</label>
            <InputTextArea class="form-control" @bind-Value="record.Comment" rows="4" />
        </div>

        @if (CanEdit)
        {
            <button type="submit" class="btn btn-primary">üíæ Ulo≈æit zmƒõny</button>
        }
        else
        {
            <div class="mb-3">
                <label class="form-label">P≈ôidat koment√°≈ô</label>
                <InputTextArea class="form-control" @bind-Value="newComment" rows="3" />
                <Button class="mt-2" Color="ButtonColor.Secondary" OnClick="AppendComment">üìå P≈ôidat</Button>
            </div>
        }

        @if (CanEdit)
        {
            <Button class="ms-2" Color="ButtonColor.Danger" OnClick="ShowDeleteConfirm">üóë Smazat z√°znam</Button>
        }

        @if (confirmDelete)
        {
            <div class="alert alert-danger mt-3">
                Opravdu chcete smazat tento z√°znam?<br />
                <Button class="mt-2" Color="ButtonColor.Danger" Disabled="@isDeleting" OnClick="DeleteRecord">‚úÖ Ano, smazat</Button>
                <Button class="mt-2 ms-2" Color="ButtonColor.Secondary" @onclick="(() => confirmDelete = false)">Zru≈°it</Button>
            </div>
        }
    </EditForm>
}

@code {
    [Parameter] public int id { get; set; }

    private UserDto? userDto;
    private RecordDto? record;
    private string newComment = "";
    private bool isLoading = true;
    private bool confirmDelete = false;
    private bool isDeleting = false;

    private bool CanEdit => userDto?.IsAdmin == true || userDto?.Id == record?.Watcher?.Id;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            userDto = await LocalStorage.GetItemAsync<UserDto>("userDto");
        }
        catch{
            throw new Exception("User is not logged in.");
        }
        try
        {
            record = await BAC.Record_GetByIdAsync(id);
        }
        catch
        {
            record = null;
        }

        isLoading = false;
    }

    private async Task SaveChanges()
    {
        if (record == null) return;

        await BAC.Record_UpdateAsync(record.Id, record);
        Nav.NavigateTo($"/zaznam/{record.Id}");
    }

    private async Task AppendComment()
    {
        if (string.IsNullOrWhiteSpace(newComment)) return;

        await BAC.Record_AppendCommentAsync(id, new CommentUpdateDto(newComment));
        record!.Comment += newComment;
        newComment = "";
    }

    private void ShowDeleteConfirm() => confirmDelete = true;

    private async Task DeleteRecord()
    {
        isDeleting = true;
        await BAC.Record_DeleteAsync(id);
        Nav.NavigateTo("/zaznamy");
    }
}
