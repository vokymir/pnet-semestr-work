@page "/ptackar/{PublicIdentifier}/{Id:int}"
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject BirdApiClient BAC
@inject NavigationManager NavManager

<PageTitle>Pt√°ƒçka≈ô: @watcher?.FirstName @watcher?.LastName</PageTitle>
@if (watcher == null)
{
    <h1>Detail pt√°ƒçka≈ôe</h1>
    <p>Naƒç√≠t√°n√≠...</p>
}
else
{
    <h1>@watcher.FirstName @watcher.LastName</h1>

    <h3>K√≥d pt√°ƒçka≈ôe: @PublicIdentifier</h3>

<button class="btn btn-secondary" @onclick='() => NavManager.NavigateTo($"/ptackar/uprava/{watcher.Id}")'>
    Upravit pt√°ƒçka≈ôe
</button>

    <h5 class="mt-4">Kur√°to≈ôi</h5>
    @if (watcher is not null && watcher.Curators is not null && watcher.Curators.Any())
    {
        <ul>
            @foreach (var curator in watcher.Curators)
            {
                <li>
                    @if (curator.Id == watcher.MainCuratorId)
                    {
                        <b>@curator.DisplayName</b>
                    }
                    else
                    {
                        @curator.DisplayName
                    }
                </li>
            }
        </ul>
    }
    else
    {
        <p>≈Ω√°dn√≠ kur√°to≈ôi.</p>
    }

    <h5 class="mt-4">Soutƒõ≈æe</h5>
    @if (watcher is not null && watcher.Participating is not null && watcher.Participating.Any())
    {
        <CardGroup>
            @foreach (var ev in watcher.Participating)
            {
                <Card Style="width:18rem;">
                    <CardBody>
                        <CardTitle>@ev.Name</CardTitle>
                        <CardText>@ev.PublicIdentifier</CardText>
                        <Button Color="ButtonColor.Primary" To=@($"/soutez/{ev.PublicIdentifier}")
                            Type="ButtonType.Link">Zobrazit</Button>
                    </CardBody>
                </Card>
            }
        </CardGroup>
    }
    else
    {
        <p>Nesoutƒõ≈æ√≠ nikde.</p>
    }

    <h5 class="mt-4">Z√°znamy</h5>
    @if (watcher is not null && watcher.Records is not null && watcher.Records.Any() && records is not null)
    {
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Druh</th>
                    <th>Datum</th>
                    <th>Poƒçet</th>
                    <th>Akce</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var record in records)
                {
                    <tr>
                        <td>@(record.Bird?.FullName ?? "Probl√©m s naƒç√≠t√°n√≠m z√°znamu")</td>
                        <td>@record.DateSeen.ToLocalTime().ToString("dd.MM.yyyy HH:mm")</td>
                        <td>@record.Count</td>
                        <td><a href="@($"/zaznam/{record.Id}")">Podrobnosti</a></td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else if (watcher is null || watcher is not null && watcher.Records is not null && watcher.Records.Any() && records is
    null)
    {
        <p>Naƒç√≠t√°n√≠ z√°znam≈Ø...</p>
    }
    else
    {
        <p>≈Ω√°dn√© z√°znamy.</p>
    }

<div class="mt-4">
    @if (!showDeleteConfirm)
    {
        <Button Color="ButtonColor.Danger" @onclick="@(() => showDeleteConfirm = true)">
            üóë P≈ôestat spravovat pt√°ƒçka≈ôe
        </Button>
    }
    else
    {
        <div class="alert alert-danger" role="alert">
            Opravdu chcete opustit pt√°ƒçka≈ôe <strong>@watcher?.FirstName @watcher?.LastName</strong>?
            <br />
            <div class="mt-2">
               <Button Color="ButtonColor.Danger" Disabled="@isDeleting" @onclick="RemoveWatcherAsync">
                     ‚úÖ Ano, opustit
                </Button>
               <Button Color="ButtonColor.Secondary" Disabled="@isDeleting" @onclick="@(() => showDeleteConfirm = false)"
                   class="ms-2">
                     Zru≈°it
                </Button>
            </div>
        </div>
    }
</div>
}

@code {
    [Parameter]
    public string PublicIdentifier { get; set; } = default!;

    [Parameter]
    public int Id { get; set; } = default!;

    private WatcherDto? watcher;
    private List<RecordDto>? records;
    private bool showDeleteConfirm = false;
    private bool isDeleting = false;

    protected override async Task OnInitializedAsync()
    {
        watcher = await BAC.Watcher_GetByIdAsync(Id);

        if (watcher is not null)
        {
            var r = await BAC.Record_GetByWatcherAsync(watcher.Id);
            records = r.ToList();
        }
    }

    [Inject] private NavigationManager Nav { get; set; } = default!;

    private async Task RemoveWatcherAsync()
    {
        isDeleting = true;
        try
        {
            if (watcher is null) return;

            var user = await LocalStorage.GetItemAsync<UserDto>("userDto");
            if (user == null)
            {
                Console.WriteLine("U≈æivatel nen√≠ p≈ôihl√°≈°en.");
                return;
            }

            // Odeber aktu√°ln√≠ho u≈æivatele z kur√°tor≈Ø
            watcher.Curators = watcher.Curators?
            .Where(c => c.Id != user.Id)
            .ToList();

            await BAC.Watcher_UpdateWatcherAsync(watcher.Id, watcher);

            Nav.NavigateTo("/ptackari");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Chyba p≈ôi maz√°n√≠: {ex.Message}");
            isDeleting = false;
        }
    }
}
