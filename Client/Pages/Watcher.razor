@page "/ptackar/{PublicIdentifier}/{Id:int}"
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject BirdApiClient BAC
@inject NavigationManager NavManager
@inject Manager Manager

<PageTitle>Pt√°ƒçka≈ô: @watcher?.FirstName @watcher?.LastName</PageTitle>

@if (watcher == null)
{
    <div class="text-center my-5">
        <h1>Detail pt√°ƒçka≈ôe</h1>
        <p class="text-muted">Naƒç√≠t√°n√≠...</p>
    </div>
}
else
{
    <div class="container my-4">
        <div class="d-flex justify-content-between align-items-center mb-3 flex-wrap gap-3">
            <h1 class="fw-bold mb-0">@watcher.FirstName @watcher.LastName</h1>
            <button class="btn btn-outline-secondary" @onclick='() => NavManager.NavigateTo($"/ptackar/uprava/{watcher.Id}")'>
                ‚úèÔ∏è Upravit pt√°ƒçka≈ôe
            </button>
        </div>

        <h5 class="text-secondary mb-4">K√≥d pt√°ƒçka≈ôe: <span class="fw-semibold">@PublicIdentifier</span></h5>

        <section class="mb-5">
            <h4>Kur√°to≈ôi</h4>
            @if (watcher.Curators?.Any() == true)
            {
                <ul class="list-group list-group-flush">
                    @foreach (var curator in watcher.Curators)
                    {
                        <li class="list-group-item d-flex justify-content-between align-items-center px-0">
                            @if (curator.Id == watcher.MainCuratorId)
                            {
                                <span class="fw-bold">@curator.DisplayName</span>
                                <span class="badge bg-primary rounded-pill">Hlavn√≠</span>
                            }
                            else
                            {
                                <span>@curator.DisplayName</span>
                            }
                        </li>
                    }
                </ul>
            }
            else
            {
                <p class="text-muted">≈Ω√°dn√≠ kur√°to≈ôi.</p>
            }
        </section>

        <section class="mb-5">
            <h4>Soutƒõ≈æe</h4>
            @if (watcher.Participating?.Any() == true)
            {
                <div class="row g-3">
                    @foreach (var ev in watcher.Participating)
                    {
                        <div class="col-12 col-md-6 col-lg-4 col-xl-3">
                            <div class="card h-100 shadow-sm">
                                <div class="card-body d-flex flex-column">
                                    <h5 class="card-title">@ev.Name</h5>
                                    <p class="card-text text-muted mb-4">@ev.PublicIdentifier</p>
                                    <Button Color="ButtonColor.Primary" To=@($"/soutez/{ev.PublicIdentifier}") Type="ButtonType.Link" class="mt-auto">
                                        Zobrazit
                                    </Button>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
            else
            {
                <p class="text-muted">Nesoutƒõ≈æ√≠ nikde.</p>
            }
        </section>

        <section class="mb-5">
            <h4>Z√°znamy</h4>
            @if (watcher.Records?.Any() == true && records != null)
            {
                <div class="table-responsive">
                    <table class="table table-striped align-middle">
                        <thead class="table">
                            <tr>
                                <th>Druh</th>
                                <th>Datum</th>
                                <th>Poƒçet</th>
                                <th>Akce</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var record in records)
                            {
                                <tr>
                                    <td>@(record.Bird?.FullName ?? "<i>Probl√©m s naƒç√≠t√°n√≠m z√°znamu</i>")</td>
                                    <td>@record.DateSeen.ToLocalTime().ToString("dd.MM.yyyy HH:mm")</td>
                                    <td>@record.Count</td>
                                    <td>
                                        <a class="btn btn-sm btn-outline-primary" href="@($"/zaznam/{record.Id}")">
                                            Podrobnosti
                                        </a>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
            else if (watcher.Records?.Any() == true && records == null)
            {
                <p class="text-muted">Naƒç√≠t√°n√≠ z√°znam≈Ø...</p>
            }
            else
            {
                <p class="text-muted">≈Ω√°dn√© z√°znamy.</p>
            }
        </section>

        <section class="mb-5">
            @if (!showDeleteConfirm)
            {
                <Button Color="ButtonColor.Danger" @onclick="@(() => showDeleteConfirm = true)" class="w-100">
                    üóë P≈ôestat spravovat pt√°ƒçka≈ôe
                </Button>
            }
            else
            {
                <div class="alert alert-danger p-4 text-center" role="alert">
                    <p>Opravdu chcete opustit pt√°ƒçka≈ôe <strong>@watcher.FirstName @watcher.LastName</strong>?</p>
                    <div class="d-flex justify-content-center gap-3 mt-3 flex-wrap">
                        <Button Color="ButtonColor.Danger" Disabled="@isDeleting" @onclick="RemoveWatcherAsync" class="px-4">
                            ‚úÖ Ano, opustit
                        </Button>
                        <Button Color="ButtonColor.Secondary" Disabled="@isDeleting" @onclick="@(() => showDeleteConfirm = false)" class="px-4">
                            Zru≈°it
                        </Button>
                    </div>
                </div>
            }
        </section>
    </div>
}

@code {
    [Parameter] public string PublicIdentifier { get; set; } = default!;
    [Parameter] public int Id { get; set; } = default!;

    private WatcherDto? watcher;
    private List<RecordDto>? records;
    private bool showDeleteConfirm = false;
    private bool isDeleting = false;

    protected override async Task OnInitializedAsync()
    {
        watcher = await BAC.Watcher_GetByIdAsync(Id);

        if (watcher != null)
        {
            var r = await BAC.Record_GetByWatcherAsync(watcher.Id);
            records = r.ToList();
        }
    }

    private async Task RemoveWatcherAsync()
    {
        isDeleting = true;
        try
        {
            if (watcher == null) return;

            var user = await LocalStorage.GetItemAsync<UserDto>("userDto");
            if (user == null)
            {
                Console.WriteLine("U≈æivatel nen√≠ p≈ôihl√°≈°en.");
                return;
            }

            watcher.Curators = watcher.Curators?.Where(c => c.Id != user.Id).ToList();

            await BAC.Watcher_UpdateWatcherAsync(watcher.Id, watcher);

            await Manager.ReloadUserDto(LocalStorage,BAC);
            NavManager.NavigateTo("/ptackari");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Chyba p≈ôi maz√°n√≠: {ex.Message}");
            isDeleting = false;
        }
    }
}
