@using System.ComponentModel.DataAnnotations
@using Blazored.LocalStorage
@using BirdWatching.Shared.Api
@inject BirdApiClient BAC
@inject ILocalStorageService LocalStorage

<EditForm Model="Model" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label class="form-label">Přihlašovací jméno</label>
        <InputText @bind-Value="Model.username" class="form-control" />
    </div>

    <div class="mb-3">
        <label class="form-label">Heslo</label>
        <InputText @bind-Value="Model.passwordhash" type="password" class="form-control" />
    </div>

    <button type="submit" class="btn btn-primary w-100">Přihlásit se</button>

    @if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <div class="alert alert-danger mt-3" role="alert">@ErrorMessage</div>
    }
</EditForm>

@code {
    private LoginDto Model { get; set; } = new();
    private string? ErrorMessage;

    [Parameter]
    public EventCallback OnLoginSuccess { get; set; }

    private async Task HandleLogin()
    {
        ErrorMessage = null;

        try
        {
            var response = await BAC.Auth_LoginAsync(Model);

            if (!string.IsNullOrWhiteSpace(response?.Token))
            {
                await LocalStorage.SetItemAsync("authToken", response.Token);
                await LocalStorage.SetItemAsync("authTokenExpireAt", response.ExpireAt);
                await LocalStorage.SetItemAsync("userDto", response.UserDto);
                await OnLoginSuccess.InvokeAsync();
            }
            else
            {
                ErrorMessage = "Invalid login.";
            }
        }
        catch (ApiException ex)
        {
            ErrorMessage = $"Login failed: {ex.Message}";
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Login failed. Please try again later. Cause of error: {ex.Message}";
        }
    }
}
