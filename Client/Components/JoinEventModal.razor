@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject NavigationManager NavManager
@inject BirdApiClient BAC
@inject Manager Manager

<Toasts class="p-3" Messages="messages" Delay="6000" Placement="ToastsPlacement.TopRight" />
<Modal @ref="ModalRef"
       title="Připojit se do soutěže"
       IsVerticallyCentered="true"
       IsScrollable="true">
    <BodyTemplate>
        <div class="mb-3">
            <label for="eventCode">Zadejte kód soutěže:</label>
            <InputText id="eventCode" class="form-control" @bind-Value="InputValue" />
            <small class="form-text text-muted">Kód je ve tvaru <code>aBy9x</code>, pět znaků.</small>
        </div>

        <div class="mb-3">
            <label>Vyberte ptáčkaře:</label>
            @if (Watcherss is not null)
            {
                @foreach (var watcher in Watcherss)
                {
                    var id = watcher.Id;
                    var isSelected = WatcherSelections.TryGetValue(id, out var value) && value;

                    <div class="form-check">
                        <InputCheckbox class="form-check-input"
                                       Value="@isSelected"
                                       ValueChanged="val => WatcherSelections[id] = val"
                                       ValueExpression="() => WatcherSelections[id]" />
                        <label class="form-check-label">@watcher.FirstName @watcher.LastName</label>
                    </div>
                }
            }
            <small class="form-text text-muted">Zaškrtněte jednoho nebo více, za které se chcete připojit.</small>
        </div>
    </BodyTemplate>

    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="Close">Zavřít</Button>
        <Button Color="ButtonColor.Primary" @onclick="Submit" Disabled="@IsSubmitDisabled">Uložit</Button>
    </FooterTemplate>
</Modal>

@code {
    private Modal? ModalRef;
    private List<ToastMessage> messages = new();

    [Parameter] public UserDto? User { get; set; }

    [Parameter] public EventCallback OnEventJoined {get;set;}

    private string InputValue = string.Empty;
    private Dictionary<int, bool> WatcherSelections = new();
    private List<WatcherDto> Watcherss = new();

    public async Task ShowAsync(UserDto? user, string pubId = "")
    {
        User = user;

        Watcherss = User?.Watchers?.ToList() ?? new List<WatcherDto>();
        if (User?.CuratedWatchers is not null)
            foreach (var w in User.CuratedWatchers){
                bool shouldAdd = true;
                foreach (var ww in Watcherss)
                    if (w.Id == ww.Id){
                        shouldAdd = false;
                        break;
                    }
                if (shouldAdd)
                    Watcherss.Add(w);
            }

        InputValue = pubId;

        if (await LocalStorage.ContainKeyAsync("watchersGroup"))
        {
            try
            {
                var selected = await LocalStorage.GetItemAsync<List<int>>("watchersGroup") ?? new();
                WatcherSelections = Watcherss.ToDictionary(w => w.Id, w => selected.Contains(w.Id)) ?? new();
            }
            catch
            {
                WatcherSelections = Watcherss.ToDictionary(w => w.Id, w => Watcherss.Count == 1) ?? new();
            }
        }
        if (ModalRef is not null)
            await ModalRef.ShowAsync();
    }

    public async Task HideAsync()
    {
        if (ModalRef is not null)
            await ModalRef.HideAsync();
    }

    private async Task Submit()
    {
        var selected = WatcherSelections.Where(x => x.Value).Select(x => x.Key).ToList();
        if (selected.Any())
        {
            foreach(var wId in selected)
            {
                WatcherDto? w = Watcherss.FirstOrDefault<WatcherDto>(w => w.Id == wId);
                if (w is null)
                    continue;
                try{
                    await BAC.Watcher_JoinEventAsync(InputValue, wId);
                    messages.Add(new ToastMessage(){
                        Type = ToastType.Success,
                        Title = "A je tam",
                        Message = $"Ptáčkař {w.FirstName} {w.LastName} se přidal do soutěže.",
                    });
                }
                catch (ApiException aEx){
                    Console.WriteLine(aEx.Message);
                    if (aEx.StatusCode == 409)
                        messages.Add(new ToastMessage(){
                            Type = ToastType.Warning,
                            Title = "Už tam je",
                            Message = $"Ptáčkař {w.FirstName} {w.LastName} se už soutěže účastní.",
                        });
                }
                catch (Exception ex)
                {
                    Console.WriteLine(ex.Message);
                    messages.Add(new ToastMessage(){
                        Type = ToastType.Danger,
                        Title = "Něco se nepovedlo",
                        Message = $"Ptáčkař {w.FirstName} {w.LastName} nemohl být přidán do soutěže.",
                    });
                }
            }

            await HideAsync();
            await Manager.ReloadUserDto(LocalStorage, BAC);
            await OnEventJoined.InvokeAsync();
        }
    }

    private async Task Close()
    {
        await HideAsync();
    }

    private bool IsSubmitDisabled =>
        string.IsNullOrWhiteSpace(InputValue) || !WatcherSelections.Values.Any(x => x);
}
