@inherits LayoutComponentBase
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject NavigationManager NavManager

<BlazorBootstrapLayout StickyHeader="true">
    <HeaderSection>
        <GoBackButton />
        <ThemeSwitcher Class="ps-3 ps-lg-2 ms-auto" Position="DropdownMenuPosition.End" />
        <Button Type="ButtonType.Link" Color="ButtonColor.Secondary" To="/nastaveni"><Icon Name="IconName.PersonFill" /></Button>
    </HeaderSection>

    <SidebarSection>
        <Sidebar2 @ref="sidebar"
                  Href="/"
                  ImageSrc="logo-sranda.png"
                  Title="Pozorování ptáčků"
                  BadgeText="55.ph RR"
                  DataProvider="Sidebar2DataProvider"
                  Width="300"
                  WidthUnit="Unit.Px" />
    </SidebarSection>

    <ContentSection>
        @Body
    </ContentSection>

    <FooterSection>
        <Button Color="ButtonColor.Secondary" Outline="true" @onclick="ToggleSidebar"><Icon Name=@(IconNameCurrent) />Velikost postranního panelu</Button>
    </FooterSection>
</BlazorBootstrapLayout>

@code {
    private Sidebar2 sidebar = default!;
    private IEnumerable<NavItem> navItems = default!;
    private IconName IconNameCurrent = IconName.ArrowLeft;
    private bool? isLoggedIn = null;
    private string token = "token";
    private DateTime ExpireAt = DateTime.Now;

    private async Task<Sidebar2DataProviderResult> Sidebar2DataProvider(Sidebar2DataProviderRequest request)
    {
        if (navItems is null)
            navItems ??= GetNavItems();

        return await Task.FromResult(request.ApplyTo(navItems));
    }

    private IEnumerable<NavItem> GetNavItems()
    {
        navItems = new List<NavItem>
        {
            new NavItem { Id = "1", Href = "/", IconName = IconName.HouseDoorFill, Text = "Domů", Match=NavLinkMatch.All},
            new NavItem { Id = "2", Href = "/ptackari", IconName = IconName.PeopleFill, Text = "Ptáčkaři"},
            new NavItem { Id = "3", Href = "/souteze", IconName = IconName.CalendarCheckFill, Text = "Soutěže"},
            new NavItem { Id = "4", Href = "/nastaveni", IconName = IconName.GearFill, Text = "Nastavení"},
            new NavItem { Id = "5", Href = "/ptacci", IconName = IconName.Twitter, Text = "Ptáčci"},
            new NavItem { Id = "6", Href = "/zaznam/novy", IconName = IconName.PlusSquareFill, Text = "Nový záznam"}
        };

        return navItems;
    }

    private void ToggleSidebar()
    {
        sidebar.ToggleSidebar();
        IconNameCurrent = IconNameCurrent == IconName.ArrowLeft ? IconName.ArrowRight : IconName.ArrowLeft;
    }

    protected override async Task OnInitializedAsync()
    {
        token = await LocalStorage.GetItemAsync<string>("authToken") ?? "nic";
        var expireAt = await LocalStorage.GetItemAsync<string>("authTokenExpireAt");

        if (token is not null && !string.IsNullOrEmpty(token) && DateTime.TryParse(expireAt, out ExpireAt))
        {
            var now = DateTime.Now;
            isLoggedIn = now < ExpireAt;
        }
        else
        {
            isLoggedIn = false;
        }

        if (isLoggedIn is null || (isLoggedIn is not null && !(bool)isLoggedIn)){
            NavManager.NavigateTo("/login");
        }
    }
}
